import { Module, MiddlewareConsumer, RequestMethod } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { TypeOrmModule } from '@nestjs/typeorm';
import databaseConfig from './config/database.config';
import { ValidationPipe } from '@nestjs/common';
import { APP_PIPE } from '@nestjs/core';
import { UsersModule } from './users/users.module';
import jwtConfig from './config/jwt.config';
import { JwtModule } from '@nestjs/jwt';
import { AuthModule } from './auth/auth.module';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { JwtMiddleware } from './auth/jwt.middleware';


@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true, //make this modlule global, wen wont need to import it in other modules, just use it.
      load: [databaseConfig, jwtConfig], // load database config file, jwt config file
      envFilePath: ['.env'], // load .env file
    }),
    JwtModule.registerAsync({
      imports: [ConfigModule],
      inject: [ConfigService],
      useFactory: (configService: ConfigService) => {
        const secret = configService.get('jwt.secret');
        console.log('JWT_SECRET:', secret);
        if (!secret) {
          throw new Error('JWT_SECRET is not defined in configuration');
        }
        return {
          secret,
          signOptions: {
            expiresIn: configService.get('jwt.expiresIn') || '1d',
          },
        };
      },
    }),
    // module for TypeORM
    TypeOrmModule.forRootAsync({
      inject: [ConfigService],
      useFactory: (configService: ConfigService) => ({
        ...configService.get('database'),
      }),
    }),
    
    UsersModule, // this line is auto generated by nestjs cli
    
    AuthModule, // this line is auto generated by nestjs cli
    
    // Add more module here if needed
  ],
  controllers: [AppController],
  providers: [
    AppService,
    {
      provide: APP_PIPE,
      useValue: new ValidationPipe({
        whitelist: true,
        transform: true,
        forbidNonWhitelisted: true,
      }),
    },
  ],
  exports: [JwtModule], // export JwtModule so that it can be used in other modules
})
export class AppModule {
  configure(consumer: MiddlewareConsumer) {
    consumer
      .apply(JwtMiddleware)
      .forRoutes({ path: 'users/info', method: RequestMethod.GET });
  }
}
